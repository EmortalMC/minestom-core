plugins {
    id("java-library")
    id("maven-publish")

    id("com.github.johnrengelman.shadow") version "7.1.2"
    id("com.github.evestera.depsize") version "0.1.0"
}

group "dev.emortal.minestom.core"
version "1.0-SNAPSHOT"

repositories {
    mavenCentral()
    mavenLocal()

    maven { url = "https://packages.confluent.io/maven/" }
    maven { url = "https://repo.emortal.dev/snapshots" }
    maven { url = "https://repo.emortal.dev/releases" }
    maven { url = "https://jitpack.io" }
}

dependencies {
    api("com.github.Minestom.Minestom:Minestom:85febebd09")
    implementation("net.kyori:adventure-text-minimessage:4.12.0")

    api("dev.emortal.api:agones-sdk:1.0.5")
    api("dev.emortal.api:common-proto-sdk:987060d")
    api("dev.emortal.api:live-config-parser:2b9764c")
    api("dev.emortal.api:kurushimi-sdk:1c7e886")

    api("io.kubernetes:client-java:18.0.0")

    api("io.micrometer:micrometer-registry-prometheus:1.10.5")

    // Used for the packaged topological sorting
    implementation("org.jgrapht:jgrapht-core:1.5.1")

    testImplementation("org.junit.jupiter:junit-jupiter-api:5.9.2")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.9.2")
}

test {
    useJUnitPlatform()
}

shadowJar {
    mergeServiceFiles()
}

publishing {
    repositories {
        maven {
            name = "development"
            url = uri("https://repo.emortal.dev/snapshots")
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_SECRET")
            }
        }
        maven {
            name = "release"
            url = uri("https://repo.emortal.dev/releases")
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_SECRET")
            }
        }
    }

    publications {
        maven(MavenPublication) {
            groupId = "dev.emortal.minestom"
            artifactId = "core"

            def commitHash = System.getenv("COMMIT_HASH_SHORT")
            def releaseVersion = System.getenv("RELEASE_VERSION")
            version = commitHash ?: releaseVersion ?: "local"

            from components.java
        }
    }
}